AWSTemplateFormatVersion: 2010-09-09
Description: Cafe - South Korea Public Cloud (For Clement testing on private cloud read-replica) Author Clement Ang


Parameters:

  KeyName:
    Type: String
    Description: the keypair that will use to launch EC2 instances
    Default: team4

  AmazonLinuxAMIID:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default:  '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Conditions:
  InApNorthEast2: !Equals
    - !Ref 'AWS::Region'
    - ap-northeast-2

Resources:
  ###########
  # VPC with Internet Gateway
  ###########



  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: 'default'
      Tags:
        - Key: Name
          Value: Cafe VPC

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Cafe IGW

  VPCtoIGWConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - IGW
      - VPC
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  ###########
  # Public Route Table
  ###########

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - PublicRouteTable
      - VPCtoIGWConnection
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

  ###########
  # Private Route Table
  ###########

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table 1

  ###########
  # Public Subnets x 2
  ###########

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet1
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet2
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  ###########
  # Private Subnets x 2
  ###########

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/23
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/23
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Private Subnet 2

  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateRouteTable
      - PrivateSubnet1
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateRouteTable
      - PrivateSubnet2
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  ###########
  # IAM Role for App
  ###########

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref AppRole]
      InstanceProfileName: Inventory-App-Role

  AppRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Inventory-App-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ssm:*
                Resource: '*'


  ###########
  # IAM Role for creating the Parameter Store
  ###########

  ExampleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref ExampleRole]
      InstanceProfileName: !Ref ExampleRole

  ExampleRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ExampleRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ReadParameterStore
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ssm:*
                Resource: 'arn:aws:ssm:*:*:parameter/*'
        - PolicyName: AttachRoleToInstance
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:CreateInstanceProfile
                  - ec2:AssociateIamInstanceProfile
                  - iam:AddRoleToInstanceProfile
                Resource: '*'

  ###########
  # Bastion Security Group
  ###########

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupName: Bastion-SG
      GroupDescription: Enable access to Private Cloud via SSH
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Bastion-SG


  ###########
  # Bastion Host
  ###########
  BastionInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AmazonLinuxAMIID
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: 'true'
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref BastionSecurityGroup
      SourceDestCheck: 'false'
      Tags:
        - Key: Name
          Value: Bastion
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          yum -y update


  ###########
  # ALB Security Group
  ###########

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupName: ALBSG
      GroupDescription: Port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ###########
  # App Security Group
  ###########

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupName: Inventory-App
      GroupDescription: Enable access to App
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: Inventory-App

  ###########
  # DB Security Group
  ###########

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupName: Cafe-DB Data Replica
      GroupDescription: Enable read replica to MySQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref AppSecurityGroup
      Tags:
        - Key: Name
          Value: Cafe-DBSG


  ##########
  # Launch template
  ##########

  ExampleLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t3.micro
        KeyName: !Ref KeyName
        ImageId: !Ref AmazonLinuxAMIID
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: ExampleAPP
        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
              - InstanceProfile
              - Arn
        SecurityGroupIds:
          - !Ref AppSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -ex
            sudo yum -y update
            sudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
            sudo yum install -y httpd mariadb-server
            chkconfig httpd on
            service httpd start
            cd /home/ec2-user
            cd /var/www/html

            chown -R ec2-user:ec2-user /var/www/html
      LaunchTemplateName: Cafe-LT


  ###########
  # DB Subnet Group
  ###########


  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'Cafe-DB Subnet-Group'
      DBSubnetGroupName: CafeDB-Subnet-Group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: Cafe-DBSubnetGroup


  ###########
  # Amazon RDS - mySQL creation
  ###########


  CafePublicDB:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    DependsOn: VPC
    Properties:
      DBName: cafeDB
      DBInstanceIdentifier: cafeDB
      Engine: MySQL
      AllocatedStorage: 25
      StorageType: gp2
      MultiAZ: true
      DBInstanceClass: db.t3.micro
      MasterUsername: admin
      MasterUserPassword: Re:Start!9$p
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      Tags:
        -
          Key: Name
          Value: "cafePublic"



  NATGateway:
    DependsOn: PrivateSubnet1
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt
        - NATGatewayEIP
        - AllocationId

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway



  ExampleInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn:
      - VPC
      - AppSecurityGroup
      - PublicSubnet1
      - CafePublicDB
    Properties:
      ImageId: !Ref AmazonLinuxAMIID
      InstanceType: t3.micro
      AvailabilityZone: ap-northeast-2a
      IamInstanceProfile: !Ref AppRole
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: true
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref AppSecurityGroup
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: CafeWebServer-ClementTesting
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash
          sudo yum -y update
          sudo yum install -y /usr/bin/systemctl
          sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          sudo systemctl start amazon-ssm-agent

          sudo chown -R ec2-user:ec2-user /var/www/html

          echo "Setting the application parameter values in the Parameter Store..."
          region=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone|sed 's/.$//')
          publicDNS=$(curl http://169.254.169.254/latest/meta-data/public-hostname)
          echo "Public DNS =" $publicDNS
          
          aws ssm put-parameter --name "/cafe/endpoint" --type "String" --value ${CafePublicDB.Endpoint.Address} --description "Database URL" --overwrite --region $region
          aws ssm put-parameter --name "/cafe/username" --type "String" --value "admin" --description "Database User Name" --overwrite --region $region
          aws ssm put-parameter --name "/cafe/password" --type "String" --value "Re:Start!9$p" --description "Database Password" --overwrite --region $region
          aws ssm put-parameter --name "/cafe/database" --type "String" --value "cafeDB" --description "Database Name" --overwrite --region $region
         


